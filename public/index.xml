<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Selenium Compose</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Selenium Compose</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Http Requests</title>
      <link>http://localhost:1313/scenario/https/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/scenario/https/</guid>
      <description>Declaration https declaration syntax
https: clear_users: url: https://selenium-compose.io/clear-all method: DELETE headers: - Authorization: authtoken - Content-Type: json  Usage Pre-defined http request is used with http statement
https: clear_users: url: https://selenium-compose.io/clear-all method: DELETE headers: - Authorization: authtoken - Content-Type: json scenarios: my_scenario: - http: clear_users - open: https://selenium-compose.io - wait: visibility: .singin_btn  a</description>
    </item>
    
    <item>
      <title>Scope</title>
      <link>http://localhost:1313/scenario/scope/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/scenario/scope/</guid>
      <description>Global Definitions outside scenarios key are considered to be global and accessible for all scenarios
Local Each scenario has its own scope or local. variables steps conditions https defined inside the local scope are accessible only within the scope
 Local definitions override global definitions
  Example scenario.yml
# global variables: email: aram.petrosyan.88@gmail.com var2: val2 var3: val3 scenarios: account_registration: # local variables: email: admin@selenium-compose.io # overrides global variable pass: 123456 account_activation: .</description>
    </item>
    
    <item>
      <title>Sessions</title>
      <link>http://localhost:1313/scenario/sessions/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/scenario/sessions/</guid>
      <description>In some cases you may need to create multiple sessions and execute some of steps in different session. Every step has session property to specify against which session the steps should be executed.
steps: create_new: - open: https://admin.selenium-compose.io/news - click: .new_news - type: location: editor keys: &amp;gt; Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.</description>
    </item>
    
    <item>
      <title>Steps</title>
      <link>http://localhost:1313/scenario/steps/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/scenario/steps/</guid>
      <description>Declaration steps declaration syntax
conditions: singin_popup: - visibility: .popup - element: location: .close clickable: true - visibility: .singin_btn - visibility: .signup_btn - visibility: location: .social_auth_btn count: 3 steps: guest_action: - click: .create_post - wait: singin_popup - click: .popup .close  Usage Pre-defined step is used inside actions statement, which executes the steps
conditions: singin_popup: - visibility: .popup - element: location: .close clickable: true - visibility: .singin_btn - visibility: .signup_btn - visibility: location: .</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>http://localhost:1313/scenario/variables/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/scenario/variables/</guid>
      <description> Naming Names must start with a letter and may contain letters, numbers or the _ (underscore) symbol. Pick names which clearly describe the variable&amp;rsquo;s purpose
Declaration variables declaration syntax
variables: name: Selenium Compose host: https://selenium-compose.io  Usage Variables are represented by a dollar sign followed by the name of the variable. The variable name is case-sensitive
variables: forename: John family_name: Smith fullName: $forename, $family_name  </description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>http://localhost:1313/scenario/conditions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/scenario/conditions/</guid>
      <description>To create reusable expectation set which can be used in different scenarios or multiple times within a single scenario you can use condition storage to define a set of expectation.
A condition defined in the global scope is available for all scenarios, locally defined storage is available only within the scenario is has been defined.
Declaration conditions declaration syntax
conditions: singin_popup: - visibility: .popup - element: location: .close clickable: true - visibility: .</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://localhost:1313/scenario/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/scenario/overview/</guid>
      <description>All scenarios are defined inside scenarios key inside the entry point file with the following scenario name and the scenario data
Say we have selenium.yml which is he entry point of the program
scenarios: scenario_name_1: actions: ... scenario_name_2: actions: ... scenario_name_3: actions: ...  which will be run
selenium-compose run selenium.yml  Each scenario may also contain local Variables Conditions Steps https which are available only within the scenario and override the global definitions</description>
    </item>
    
    <item>
      <title>Quick start</title>
      <link>http://localhost:1313/getting-started/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/getting-started/quick-start/</guid>
      <description>This quick start uses macOS and npm. For instructions about how to install Selenium Compose on other operating systems, see install.
You also need npm to run this tutorial.
  Step 1: Install Selenium Compose npm i selenium-compose -g  Step 2: Selenium Standalone  Selenium server requires Java. Please make sure you have it installed before moving forward
  npm i selenium-standalone -g  The above will download and setup selenium-standalone server.</description>
    </item>
    
    <item>
      <title>Install Selenium Compose</title>
      <link>http://localhost:1313/getting-started/installing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/getting-started/installing/</guid>
      <description>Selenium Compose is written in Go with support for multiple platforms. The latest release can be found at Selenium Compose Releases.
Selenium Compose currently provides pre-built binaries for the following:
 macOS (Darwin) for x64, i386, and ARM architectures Windows Linux  Selenium Compose may also be compiled from source wherever the Go toolchain can run; e.g., on other operating systems such as DragonFly BSD, OpenBSD, Plan&amp;nbsp;9, Solaris, and others.</description>
    </item>
    
    <item>
      <title>Alert</title>
      <link>http://localhost:1313/steps/alert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/alert/</guid>
      <description>Before accepting or declining alert waits until an alert popup has appeared on the current page. If one has not appeared after the timeout has exceeded the scenario will fail.
Properties    Name Description Type Required     accept Flag specifying whether accept or decline the current alert bool false   timeout Waiting timeout until an alert has appeared on the current page Duration false    Syntax alert accepts a string or a map of values.</description>
    </item>
    
    <item>
      <title>Attribute</title>
      <link>http://localhost:1313/expectations/attr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/expectations/attr/</guid>
      <description>attr waits for the given attribute of the located WebElement(s) to satisfy one or more expected conditions until the timeout has exceeded. By default, if no condition is given it will wait until the attribute is not empty.
Properties    Name Description Type Required     location Location of a WebElement(s) string true   selector Selector to locate a WebElement(s) on the DOM string false   name The name of the WebElement(s) attribute string true   is Assert the given attribute is equal to the expected value string false   contains Assert the given attribute contains the expected value string false   starts Assert the given attribute starts with the expected value string false   ends Assert the given attribute ends with the expected value string false   matches Assert the given attribute matches the expected pattern string false   ignore_case Perform case-insensitive comparisons if the flag is true bool false   count Expected count of WebElements satisfying given condition(s) Count false   timeout Waiting timeout until the expected condition(s) has been satisfied Duration false    Syntax attr accepts a map of values.</description>
    </item>
    
    <item>
      <title>Capture</title>
      <link>http://localhost:1313/steps/capture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/capture/</guid>
      <description>Properties    Name Description Type Required     name Screenshot name string false   path Path to save the screen shot string false    Syntax capture accepts a string or a map of values
Inline Use inline syntax to simply capture a screenshot and save it in output dir, which, is configured with --outdir flag
- capture: &amp;lt;string&amp;gt; | $capture_name  Mapping Use mapping syntax to save the captured image in a custom path</description>
    </item>
    
    <item>
      <title>Clear</title>
      <link>http://localhost:1313/steps/clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/clear/</guid>
      <description>clear waits until at least one WebElement is present in the DOM to clear its value unless ignore_presence has been set to true.
 Avoid using ignore_presence property unless you really have to. If no WebElement is present the scenario will not fail and continue next steps execution, which may cause confusion in the expected behaviour of the composed scenario.
  If found WebElement(s) is a text entry element, clear will clear the value.</description>
    </item>
    
    <item>
      <title>Click</title>
      <link>http://localhost:1313/steps/click/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/click/</guid>
      <description>If a WebElement location is given click waits until the WebElement become clickable before performing click unless ignore_clickable has been set true
 Avoid using ignore_clickable property unless you really have to. Each WebElement has to be checked if it is clickable before performing click on it.
If the flag has been set to true and the WebElement is not present in the DOM or is not clickable the scenario will fail which may cause confusion.</description>
    </item>
    
    <item>
      <title>Close</title>
      <link>http://localhost:1313/steps/close/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/close/</guid>
      <description>close waits until a browser has been matched to close it. All comparisons are case-sensitive for title and case-insensitive for url.
 Only one window can be closed at a time, thus, if multiple windows are matched to the provided conditions the scenario will fail, therefore, be more precise in the conditions to target the right window to close
  There are 3 ways to match a browser</description>
    </item>
    
    <item>
      <title>HTTP Request</title>
      <link>http://localhost:1313/steps/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/http/</guid>
      <description>Sometime you may need to do some cleanup or preparations on the server before a scenario execution. http provides a simple and easy-to-use way to fulfill this task
Properties    Name Description Type Required     url HTTP Request url string true   method HTTP Method string false   headers HTTP Request headers map false   content_type HTTP Request content type string false   data HTTP Request data any false    Syntax http accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Invisibility</title>
      <link>http://localhost:1313/expectations/invisibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/expectations/invisibility/</guid>
      <description>invisibility waits for the located WebElement(s) to become invisible until the timeout has exceeded.
Properties    Name Description Type Required     location Web Element location string true   selector Methods by which to find WebElements string false   count Count of expected invisible WebElements Count false   timeout Wait until the expected condition has been satisfied Duration false    Syntax invisibility accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>http://localhost:1313/steps/js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/js/</guid>
      <description>Javascript execution is only synchronous at this time (to be changed). There are two ways to execute javascript code
 Provide a price of code Provide a file relative or absolute path with javascript code inside  Properties    Name Description Type Required     content Javascript to execute or javascript file path string true   args Arguments to the script array false    Syntax js accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Key Press &amp; Release</title>
      <link>http://localhost:1313/steps/key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/key/</guid>
      <description>Syntax - press: &amp;lt;string&amp;gt;  - release: &amp;lt;string&amp;gt;  Usage - press: @ctrl a - release: @ctrl a  Special Keys The list of special keys to use
   Name Description     @cancel Cancel Key   @help Help Key   @backspace Backspace Key   @tab Tab Key   @clear Clear Key   @return Return Key   @enter Enter Key   @shift Shift Key   @control Control Key   @ctrl Control Key   @ctl Control Key   @alt Alt Key   @pause Pause Key   @escape Escape Key   @space Space Key   @pageup PageUp Key   @pagedown selenium.</description>
    </item>
    
    <item>
      <title>Maximize</title>
      <link>http://localhost:1313/steps/maximize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/maximize/</guid>
      <description>maximize waits until a browser has been matched to maximize it. All comparisons are case-sensitive for title and case-insensitive for url.
 Only one window can be maximized at a time, thus, if multiple windows are matched to the provided conditions the scenario will fail, therefore, be more precise in the conditions to target the right window to maximize
  There are 3 ways to match a browser</description>
    </item>
    
    <item>
      <title>Mouse</title>
      <link>http://localhost:1313/steps/mouse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/mouse/</guid>
      <description>Causes the left mouse button to be held down
- mouse: down  Causes the left mouse button to be released
- mouse: up  </description>
    </item>
    
    <item>
      <title>Move To</title>
      <link>http://localhost:1313/steps/move_to/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/move_to/</guid>
      <description>If the element is not visible, it will be scrolled into view. move_to can be performed only on one element at a time, thus, be more precise in your selection to target the right element or use resolve to specify to which found element resolve. If x and y not given the mouse will be moved to the center coordinates of the WebElement
Properties    Name Description Type Required     location Web Element location string true   selector Methods by which to find elements string false   resolve Resolver string false   x The relative X coordinate from the center of a WebElement int false   y The relative Y coordinate from the center of element int false    Syntax move_to accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>http://localhost:1313/steps/nav/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/nav/</guid>
      <description> Back Back moves backward in history
- nav: back  Forward Forward moves forward in history
- nav: forward  Refresh Refresh refreshes the page
- nav: refresh  </description>
    </item>
    
    <item>
      <title>Open</title>
      <link>http://localhost:1313/steps/open/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/open/</guid>
      <description>This is done using an HTTP GET operation and the method will block until the load is complete. This will follow redirects issued either by the server or as a meta-redirect from within the returned HTML
Properties    Name Description Type Required     url Web page url to load string true   timeout Wait timeout until the page has been loaded Duration false    Syntax open accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Pause</title>
      <link>http://localhost:1313/steps/pause/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/pause/</guid>
      <description> Syntax - pause: &amp;lt;Duration&amp;gt; | $duration  Milliseconds Wait 300 milliseconds before executing next action
- pause: 300ms  Seconds Wait 2 seconds before executing next action
- pause: 2s  Minutes Wait 3 minutes before executing next action
- pause: 3m  </description>
    </item>
    
    <item>
      <title>Presence</title>
      <link>http://localhost:1313/expectations/presence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/expectations/presence/</guid>
      <description>presence waits until at least one WebElement is physically present in the DOM at the given location at any state.
Properties    Name Description Type Required     location Web Element location string true   selector Methods by which to find elements string false   count Count of expected invisible elements Count false   timeout Wait until the expected condition has been satisfied Duration false    Syntax presence accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Resize</title>
      <link>http://localhost:1313/steps/resize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/resize/</guid>
      <description>resize waits until a browser has been matched to resize it to the given sizes. All comparisons are case-sensitive for title and case-insensitive for url.
 Only one window can be resized at a time, thus, if multiple windows are matched to the provided conditions the scenario will fail, therefore, be more precise in the conditions to target the right window to resize
  There are 3 ways to match a browser</description>
    </item>
    
    <item>
      <title>Submit</title>
      <link>http://localhost:1313/steps/submit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/submit/</guid>
      <description>submit waits until a WebElement is present to submit
 Only one form can be submitted at a time, thus, be more precise in your selection to target the right form or use resolve to specify to which button or form resolve
   Avoid using ignore_clickable property unless you really have to. Before submitting the WebElement is has to be present in the DOM.
If the flag has been set to true and the WebElement is not present in the DOM or is not clickable the scenario will fail which may cause confusion.</description>
    </item>
    
    <item>
      <title>Switch</title>
      <link>http://localhost:1313/steps/switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/switch/</guid>
      <description>switch waits until a browser has been matched to switch to it. All comparisons are case-sensitive for title and case-insensitive for url.
 Only one window can be switched at a time, thus, if multiple windows are matched to the provided conditions the scenario will fail, therefore, be more precise in the conditions to target the right window to switch
  There are 3 ways to match a browser</description>
    </item>
    
    <item>
      <title>Text</title>
      <link>http://localhost:1313/expectations/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/expectations/text/</guid>
      <description>text waits until the located WebElement(s) content or value satisfies the expected condition(s). if the WebElement is a text input its value will be asserted otherwise the content of the element. If no condition is given text will wait until the WebElement value or content is not empty.
Properties    Name Description Type Required     location Web Element location string false   selector Methods by which to find elements string false   is Assert content or value of the located WebElement(s) is equal to the expected string string false   contains Assert content or value of the located WebElement(s) contains the expected string string false   starts Assert content or value of the located WebElement(s) starts with the expected string string false   ends Assert content or value of the located WebElement(s) ends with the expected string string false   matches Assert content or value of the located WebElement(s) matches the pattern string false   ignore_case Perform case-insensitive comparisons if the flag is true bool false   count Expected count of WebElements satisfying given condition(s) Count false   timeout Waiting timeout until the expected condition(s) has been satisfied Duration false    Syntax text accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Title</title>
      <link>http://localhost:1313/expectations/title/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/expectations/title/</guid>
      <description>title waits until the current page&amp;rsquo;s title satisfy the expected condition(s)
Properties    Name Description Type Required     is Expect the current page&amp;rsquo;s title to be the given string string false   contains Expect the current page&amp;rsquo;s title to contain the given string&amp;rsquo; string false   starts Expect the current page&amp;rsquo;s title to start the given string&amp;rsquo; string false   ends Expect the current page&amp;rsquo;s title to end with the given string&amp;rsquo; string false   matches Expect the current page&amp;rsquo;s title to end with the given string&amp;rsquo; string false   ignore_case Perform case-insensitive comparisons if the flag is true bool false   timeout Waiting timeout until the expected condition(s) has been satisfied Duration false    Syntax title accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Type</title>
      <link>http://localhost:1313/steps/type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/steps/type/</guid>
      <description>Properties    Name Description Type Required     location Web Element location string true   selector Methods by which to find elements string false   resolve Resolver string false   timeout The amount of time to wait until Web Element becomes clickable Duration false   ignore_presence Do not wait until the location WebElement is present bool false    Syntax type accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Url</title>
      <link>http://localhost:1313/expectations/url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/expectations/url/</guid>
      <description>url waits until the current page&amp;rsquo;s url satisfy the expected condition(s) Unlike all other conditions all url comparisons are case-insensitive.
Properties    Name Description Type Required     is Expect the current page&amp;rsquo;s url to be the given string string false   contains Expect the current page&amp;rsquo;s url to contain the given string&amp;rsquo; string false   starts Expect the current page&amp;rsquo;s url to start the given string&amp;rsquo; string false   ends Expect the current page&amp;rsquo;s url to end with the given string&amp;rsquo; string false   matches Expect the current page&amp;rsquo;s url to end with the given string&amp;rsquo; string false   timeout Wait until the expected condition has been satisfied Duration false    Syntax url accepts a string or a map of values</description>
    </item>
    
    <item>
      <title>Visibility</title>
      <link>http://localhost:1313/expectations/visibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/expectations/visibility/</guid>
      <description>visibility waits for the located WebElement(s) to become visible until the timeout has exceeded. All comparisons are case-sensitive unless ignore_case has been set to true
Properties    Name Description Type Required     location Web Element location string true   selector Methods by which to find elements string false   is Expect the WebElement(s) visibility whose content or value is equal to the given string string false   contains Expect the WebElement(s) visibility whose content or value contains the given string string false   starts Expect the WebElement(s) visibility whose content or value starts with the given string string false   ends Expect the WebElement(s) visibility whose content or value ends with the given string string false   matches Expect the WebElement(s) visibility whose content or value matches the given string string false   ignore_case Perform case-insensitive comparisons if the flag is true bool false   count Count of expected visible WebElements Count false   timeout Wait until the expected condition has been satisfied Duration false    Syntax visibility accepts a string or a map of values</description>
    </item>
    
  </channel>
</rss>